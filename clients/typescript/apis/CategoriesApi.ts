/* tslint:disable */
/* eslint-disable */
/**
 * Organizze API
 * Specification for the Organizze API described in [https://github.com/organizze/api-doc](https://github.com/organizze/api-doc)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Category,
  FailedAuthentication,
  NotFound,
} from '../models';
import {
    CategoryFromJSON,
    CategoryToJSON,
    FailedAuthenticationFromJSON,
    FailedAuthenticationToJSON,
    NotFoundFromJSON,
    NotFoundToJSON,
} from '../models';

export interface ReadCategoryRequest {
    categoryID: number;
}

/**
 * 
 */
export class CategoriesApi extends runtime.BaseAPI {

    /**
     * List Categories
     */
    async listCategoriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Category>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryFromJSON));
    }

    /**
     * List Categories
     */
    async listCategories(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Category>> {
        const response = await this.listCategoriesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Read Category
     */
    async readCategoryRaw(requestParameters: ReadCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Category>> {
        if (requestParameters.categoryID === null || requestParameters.categoryID === undefined) {
            throw new runtime.RequiredError('categoryID','Required parameter requestParameters.categoryID was null or undefined when calling readCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/categories/{categoryID}`.replace(`{${"categoryID"}}`, encodeURIComponent(String(requestParameters.categoryID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFromJSON(jsonValue));
    }

    /**
     * Read Category
     */
    async readCategory(requestParameters: ReadCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Category> {
        const response = await this.readCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
