/* tslint:disable */
/* eslint-disable */
/**
 * Organizze API
 * Specification for the Organizze API described in [https://github.com/organizze/api-doc](https://github.com/organizze/api-doc)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreditCard,
  CreditCardInvoice,
  CreditCardInvoiceFull,
  FailedAuthentication,
  NotFound,
  Transaction,
} from '../models';
import {
    CreditCardFromJSON,
    CreditCardToJSON,
    CreditCardInvoiceFromJSON,
    CreditCardInvoiceToJSON,
    CreditCardInvoiceFullFromJSON,
    CreditCardInvoiceFullToJSON,
    FailedAuthenticationFromJSON,
    FailedAuthenticationToJSON,
    NotFoundFromJSON,
    NotFoundToJSON,
    TransactionFromJSON,
    TransactionToJSON,
} from '../models';

export interface ListCreditCardInvoicePaymentsRequest {
    creditCardID: number;
    creditCardInvoiceID: number;
}

export interface ListCreditCardInvoicesRequest {
    creditCardID: number;
}

export interface ReadCreditCardRequest {
    creditCardID: number;
}

export interface ReadCreditCardInvoiceRequest {
    creditCardID: number;
    creditCardInvoiceID: number;
}

/**
 * 
 */
export class CreditCardsApi extends runtime.BaseAPI {

    /**
     * List Credit Card Invoice Payments
     */
    async listCreditCardInvoicePaymentsRaw(requestParameters: ListCreditCardInvoicePaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Transaction>>> {
        if (requestParameters.creditCardID === null || requestParameters.creditCardID === undefined) {
            throw new runtime.RequiredError('creditCardID','Required parameter requestParameters.creditCardID was null or undefined when calling listCreditCardInvoicePayments.');
        }

        if (requestParameters.creditCardInvoiceID === null || requestParameters.creditCardInvoiceID === undefined) {
            throw new runtime.RequiredError('creditCardInvoiceID','Required parameter requestParameters.creditCardInvoiceID was null or undefined when calling listCreditCardInvoicePayments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/credit_cards/{creditCardID}/invoices/{creditCardInvoiceID}/payments`.replace(`{${"creditCardID"}}`, encodeURIComponent(String(requestParameters.creditCardID))).replace(`{${"creditCardInvoiceID"}}`, encodeURIComponent(String(requestParameters.creditCardInvoiceID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransactionFromJSON));
    }

    /**
     * List Credit Card Invoice Payments
     */
    async listCreditCardInvoicePayments(requestParameters: ListCreditCardInvoicePaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Transaction>> {
        const response = await this.listCreditCardInvoicePaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Credit Card Invoices
     */
    async listCreditCardInvoicesRaw(requestParameters: ListCreditCardInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CreditCardInvoice>>> {
        if (requestParameters.creditCardID === null || requestParameters.creditCardID === undefined) {
            throw new runtime.RequiredError('creditCardID','Required parameter requestParameters.creditCardID was null or undefined when calling listCreditCardInvoices.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/credit_cards/{creditCardID}/invoices`.replace(`{${"creditCardID"}}`, encodeURIComponent(String(requestParameters.creditCardID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CreditCardInvoiceFromJSON));
    }

    /**
     * List Credit Card Invoices
     */
    async listCreditCardInvoices(requestParameters: ListCreditCardInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CreditCardInvoice>> {
        const response = await this.listCreditCardInvoicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Credit Cards
     */
    async listCreditCardsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CreditCard>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/credit_cards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CreditCardFromJSON));
    }

    /**
     * List Credit Cards
     */
    async listCreditCards(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CreditCard>> {
        const response = await this.listCreditCardsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Read Credit Card
     */
    async readCreditCardRaw(requestParameters: ReadCreditCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditCard>> {
        if (requestParameters.creditCardID === null || requestParameters.creditCardID === undefined) {
            throw new runtime.RequiredError('creditCardID','Required parameter requestParameters.creditCardID was null or undefined when calling readCreditCard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/credit_cards/{creditCardID}`.replace(`{${"creditCardID"}}`, encodeURIComponent(String(requestParameters.creditCardID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditCardFromJSON(jsonValue));
    }

    /**
     * Read Credit Card
     */
    async readCreditCard(requestParameters: ReadCreditCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditCard> {
        const response = await this.readCreditCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read Credit Card Invoice
     */
    async readCreditCardInvoiceRaw(requestParameters: ReadCreditCardInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditCardInvoiceFull>> {
        if (requestParameters.creditCardID === null || requestParameters.creditCardID === undefined) {
            throw new runtime.RequiredError('creditCardID','Required parameter requestParameters.creditCardID was null or undefined when calling readCreditCardInvoice.');
        }

        if (requestParameters.creditCardInvoiceID === null || requestParameters.creditCardInvoiceID === undefined) {
            throw new runtime.RequiredError('creditCardInvoiceID','Required parameter requestParameters.creditCardInvoiceID was null or undefined when calling readCreditCardInvoice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/credit_cards/{creditCardID}/invoices/{creditCardInvoiceID}`.replace(`{${"creditCardID"}}`, encodeURIComponent(String(requestParameters.creditCardID))).replace(`{${"creditCardInvoiceID"}}`, encodeURIComponent(String(requestParameters.creditCardInvoiceID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditCardInvoiceFullFromJSON(jsonValue));
    }

    /**
     * Read Credit Card Invoice
     */
    async readCreditCardInvoice(requestParameters: ReadCreditCardInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditCardInvoiceFull> {
        const response = await this.readCreditCardInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
